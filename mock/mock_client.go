// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/events.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	stan_go "github.com/nats-io/stan.go"
	reflect "reflect"
)

// MockEventOctopusClient is a mock of EventOctopusClient interface
type MockEventOctopusClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventOctopusClientMockRecorder
}

// MockEventOctopusClientMockRecorder is the mock recorder for MockEventOctopusClient
type MockEventOctopusClientMockRecorder struct {
	mock *MockEventOctopusClient
}

// NewMockEventOctopusClient creates a new mock instance
func NewMockEventOctopusClient(ctrl *gomock.Controller) *MockEventOctopusClient {
	mock := &MockEventOctopusClient{ctrl: ctrl}
	mock.recorder = &MockEventOctopusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventOctopusClient) EXPECT() *MockEventOctopusClientMockRecorder {
	return m.recorder
}

// EventPublisher mocks base method
func (m *MockEventOctopusClient) EventPublisher(clientId string) (stan_go.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublisher", clientId)
	ret0, _ := ret[0].(stan_go.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventPublisher indicates an expected call of EventPublisher
func (mr *MockEventOctopusClientMockRecorder) EventPublisher(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublisher", reflect.TypeOf((*MockEventOctopusClient)(nil).EventPublisher), clientId)
}

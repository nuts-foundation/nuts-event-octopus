// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Event defines component schema for Event.
type Event struct {
	ConsentId            string     `json:"consentId"`
	Error                *string    `json:"error,omitempty"`
	ExternalId           string     `json:"externalId"`
	InitiatorLegalEntity Identifier `json:"initiatorLegalEntity"`
	Name                 string     `json:"name"`
	Payload              string     `json:"payload"`
	RetryCount           int32      `json:"retryCount"`
	TransactionId        *string    `json:"transactionId,omitempty"`
	Uuid                 string     `json:"uuid"`
}

// EventListResponse defines component schema for EventListResponse.
type EventListResponse struct {
	Events []Event `json:"events,omitempty"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all events currently in store (GET /events)
	List(ctx echo.Context) error
	// Find a specific event by its externalId (GET /events/by_external_id/{external_id})
	GetEventByExternalId(ctx echo.Context, externalId string) error
	// Find a specific event (GET /events/{uuid})
	GetEvent(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List(ctx)
	return err
}

// GetEventByExternalId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventByExternalId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "external_id" -------------
	var externalId string

	err = runtime.BindStyledParameter("simple", false, "external_id", ctx.Param("external_id"), &externalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventByExternalId(ctx, externalId)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameter("simple", false, "uuid", ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvent(ctx, uuid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/events", wrapper.List)
	router.GET("/events/by_external_id/:external_id", wrapper.GetEventByExternalId)
	router.GET("/events/:uuid", wrapper.GetEvent)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW3W7bRhN9lcF+H9AEkCk5NtKAd81PA7eBEzhNUSA1ktFySG1D7jK7s3IIQ+9ezJK0",
	"JIuO0wIFelFfGORyZnZ+zjmja6Vd0zpLloPKr1XQK2owPb5Yk2V5aL1rybOhdKydDWT5rJCXgoL2pmXj",
	"rMrVr6fw7t3Zc8AQTGWpgGUHz5wvENgBgiftfKFmqnS+QVa5itHIO3ctqVwF9sZWajNT5L3zh/HTMXjC",
	"4CwYCxoDgSsBoYxWixHW0PtOBf3C5C3WU5mfPQeNtY41cp+29l3LDmIwtoKnb88BbQGtN2tkgk/UybXG",
	"GjbIzr+iCusXlg13UxdP2uXX6v+eSpWr/823I5gP/Z+fFWTZlIa8RLDYkHiQjY3K348zuKDPkQKDvLKP",
	"mkm6eeujsVDWplrx4aeydld9v6Yc09cQtaYQ1EwVRipaRmnQs31LT5rMOsXAugYZPnL0FKD1JIZfyQpK",
	"56E0MrnAyHRousbaTKSH+tNU1nY8R2bUq4YsQ4/GrS3s1JJOm7am/rlHz+XEFFvsaocT2Dmnq/1+vJU6",
	"4Ke3r88BA6DW1I6o6u2Olt4UFcGD3FOZf7SRw9H+pyNszceHU2DyxL575mJPzf1MFsKz37ZexjJVPYLY",
	"ow2YOPI3mLvj/S30Ted33XF/gFTl52gElfn70ShxYK/+PUrPdoTpDsptZ3i5mfXy9soEvqDQiuuh1NF6",
	"lEXD1IT7ONsL5uamHvQeO7WRenbofNCXl2TJGw3mxgZioCIRw9PAoEGGZoDVUruCZkCsMzjj7wJgfYVd",
	"2FWBhDsL7y7OoXR17a76iSIULi5rAu1qZ+FB/jDJGq/Iyr8xg04uW2Mdk7jKh8qsKYX73aauoxBG5udt",
	"7kyRP8qOH2dPThfZcXZ8fPLkyUn2KDvNHmfH+aL/+35iykkZS3fYkB/enEFoSZvSaJSz1Io0DAjsPGXw",
	"y4p2D4bVElKy/dTG1I09GoRmB8QhS4XURtMw+F5h1cs3r9YnaYSGU4XnkcPeTZKYmqk1+TCQLjvOFuLi",
	"WrLYGpWrk2yRLRLceJVQM98iqaJEXIEZjmxUtQmcsN0jMRk+WiyGdcvDHsa2rYeOzP8Icvm4r78JmXtY",
	"T+3fb/vrn2FMYAZLV3SwcnURQJKTbg41iGOITYO+U7m6II7egsj+0HcdvSfLdScan3oms8cqCJeTjbqU",
	"GENP5svuw0jjD6aYX++8bO5sWEWcanravdiVgBY9NsTk5bKDXw/bwFLOuAv8zT4Z5M2IsYxuFJ09V7Ur",
	"TuwjzXZmcBvil//0TP/KHF1k7ZrE6aFmQe3p4vRWSkxfeN7WaFIyW7L3LLBOVna00oi7Cz9I6nx0m0Hr",
	"3RKXdQdFJFkvngKj50GKYgDroHa2Ij/QmooZlN41cLUyegUaLSxJVlVsSFyQwTCsMMCSyMLNOs9uYfVH",
	"YwvAG2kZaL3swAjHd3H0Fbheyzq6H5j3gVGi3I3CGVSyFMYfo6Xxgft0p/E5rMi7gXnfxv0PqP96oE7B",
	"crP5MwAA//8idpoSwA0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}


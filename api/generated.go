// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Event defines component schema for Event.
type Event struct {
	ConsentId            *string    `json:"consentId,omitempty"`
	Error                *string    `json:"error,omitempty"`
	ExternalId           string     `json:"externalId"`
	InitiatorLegalEntity Identifier `json:"initiatorLegalEntity"`
	Name                 string     `json:"name"`
	Payload              string     `json:"payload"`
	RetryCount           int32      `json:"retryCount"`
	TransactionId        *string    `json:"transactionId,omitempty"`
	Uuid                 string     `json:"uuid"`
}

// EventListResponse defines component schema for EventListResponse.
type EventListResponse struct {
	Events []Event `json:"events,omitempty"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all events currently in store (GET /events)
	List(ctx echo.Context) error
	// Find a specific event by its externalId (GET /events/by_external_id/{external_id})
	GetEventByExternalId(ctx echo.Context, externalId string) error
	// Find a specific event (GET /events/{uuid})
	GetEvent(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List(ctx)
	return err
}

// GetEventByExternalId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventByExternalId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "external_id" -------------
	var externalId string

	err = runtime.BindStyledParameter("simple", false, "external_id", ctx.Param("external_id"), &externalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventByExternalId(ctx, externalId)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameter("simple", false, "uuid", ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEvent(ctx, uuid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/events", wrapper.List)
	router.GET("/events/by_external_id/:external_id", wrapper.GetEventByExternalId)
	router.GET("/events/:uuid", wrapper.GetEvent)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWb2/bxg/+KsT9fsBawJGdJugKvVv/rMhWpEW6DgO6oKVPlHyrdKfe8ZwKgb/7wJMU",
	"27HSdAMG7MXyIpBOJI98+Dykr5V2TessWQ4qv1ZBr6jB9PhiTZblofWuJc+G0rF2NpDls0JeCgram5aN",
	"sypXv57Cu3dnzwFDMJWlApYdPHO+QGAHCJ6084WaqdL5BlnlKkYj79y1pHIV2Btbqc1MkffOH8ZPx+AJ",
	"g7NgLGgMBK4EhDJaLUZYQ+87FfQLk7dYT2V+9hw01jrWyH3a2nctO4jB2Aqevj0HtAW03qyRCT5RJ9ca",
	"a9ggO/+KKqxfWDbcTV08aZdfq/97KlWu/jfftmA+4D8/K8iyKQ15iWCxIfEgGxuVvx97cEGfIwUGeWUf",
	"NZOgeeujsVDWplrx4aeydlc9XlOO6WuIWlMIaqYKIxUtowD0bN/SkyazTjGwrkGajxw9BWg9ieFXsoLS",
	"eSiNdC4wMh2arrE2E+mh/jSVtR3PkRn1qiHL0LNxaws7taTTpq2pf+7ZcznRxRa72uEEd87pah+Pt1IH",
	"/PT29TlgANSa2pFVvd3R0puiIniQeyrzjzZyONr/dISt+fhwikye2HfPXOyluZ/JQnT229bLWKaqZxB7",
	"tAGTRv6Gcne8v0W+6fyuO+4PkKr8HI2wMn8/GiUN7NW/J+k7ZLbt2+Vm1o+0VybwBYVWAD8cb7QeR6Fh",
	"asJ9Ou2H5OamBvQeO7WRGnYkfIDFS7LkjQZzYwMxUJHE4GlQzTB6ZoDVUruCZkCsMzjj7wJgfYVd2FV+",
	"4pqFdxfnULq6dld9FxEKF5c1gXa1s/Agf5hGGa/Iyr8xg04uW2Md00CVD5VZUwr3u01Io4hEeuZt7kyR",
	"P8qOH2dPThfZcXZ8fPLkyUn2KDvNHmfH+aL/+36is2kalu4QkB/enEFoSZvSaJSzBEVqBgR2njL4ZUW7",
	"B8M6CSnZvmtj6sYeDcNlh7ghS4XURtPQ+H6qqpdvXq1PUgsNpwrPI4e9myQxNVNr8mEQWnacLcTFtWSx",
	"NSpXJ9kiWyS68SqxZr5lUkVJrEIzHBWoahM48blnYjJ8tFgMK5aH3YttWw+IzP8Icvm4o7+JmXtcT/Dv",
	"w/76ZxgTmMHSFR2sXF0EkOQEzaEGcQyxadB3KlcXxNFbkFE/4K6j92S57mSuJ8yk91gF0W+yUZcSY8Bk",
	"vuw+jNL9YIr59c7L5k7AKuJU09Puxa7sW/TYEJOXyw5+MWwDSznj/Pc3O2QYaUaMpXXjoNlzVbsDiX2k",
	"2U4PblP88p/u6V/po4usXZM0PdQsrD1dnN5KiekLz9saTUpmK/ZeBdbJmo5WgLi78IOkzke3GbTeLXFZ",
	"d1BEkpXiKTB6HkZRDGAd1M5W5AdZUzGD0rsGrlZGr0CjhSXJeooNiQsyGIYVBlgSWbhZ4dktrv5obAF4",
	"M1oGWS87MKLxXR59ha7XsoLuJ+Z9ZJQod7NwBpUshfEHaGl84D7daX4Oa/FuYt63Zf8j6r+eqFO03Gz+",
	"DAAA//+3aeKWtA0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

